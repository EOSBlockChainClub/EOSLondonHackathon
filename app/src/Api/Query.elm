-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


projects : SelectionSet decodesTo Api.Object.Project -> Field (List decodesTo) RootQuery
projects object =
    Object.selectionField "projects" [] object (identity >> Decode.list)


type alias ProjectRequiredArguments =
    { accountName : String }


project : ProjectRequiredArguments -> SelectionSet decodesTo Api.Object.Project -> Field decodesTo RootQuery
project requiredArgs object =
    Object.selectionField "project" [ Argument.required "accountName" requiredArgs.accountName Encode.string ] object identity
